<?php
// $Id: admin_theme.install,v 1.1.2.2.4.4 2009/10/20 18:25:45 davyvandenbremt Exp $

/**
 * Implementation of hook_install().
 */
function admin_theme_install() {
  // updating module weight to 10 to make it run after system (for user access checks etc)
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'admin_theme'");
  
  $link = array('!link' => l(t('Administer > Appearance > Administration theme'), 'admin/appearance'));
  drupal_set_message(t("Administration theme module settings are available under !link", $link));
}

function admin_theme_admin_theme_info_uninstall() {
  $options = array();
  $options['batch'] = array(
    'title' => t('Batch processing'),
    'description' => t('Use the administration theme when executing batch operations.'),
  );  
  if (module_exists('img_assist')) {
    $options['img_assist'] = array(
      'title' => t('Image assist'),
      'description' => t('Use the administration theme when viewing the Image assist popup window.'),
    );
  }
  if (module_exists('coder')) {
    $options['coder'] = array(
      'title' => t('Code reviews'),
      'description' => t('Use the administration theme when viewing Coder code reviews.'),
    );
  }
  if (module_exists('devel')) {
    $options['devel'] = array(
      'title' => t('Devel pages.'),
      'description' => t('Use the administration theme when viewing pages of the devel module (hook_elements(), Dev render, Dev load, Session viewer, Theme registery, Variable editor, ...).'),
    );
  }
  if (module_exists('service_attachments')) {
    $options['service_attachments'] = array(
      'title' => t('Service attachments form on nodes.'),
      'description' => t('Use the administration theme when viewing service attachments on nodes.'),
    );
  }
  if (module_exists('webform')) {
    $options['webform_results'] = array(
      'title' => t('Webform submissions.'),
      'description' => t('Use the administration theme when viewing webform submissions.'),
    );
  }
  if (module_exists('statistics')) {
    $options['statistics'] = array(
      'title' => t('Pages defined by the statistics module.'),
      'description' => t('Use the administration theme when viewing pages of the statistics module.'),
    );
  }
  return $options;
}

function admin_theme_list_uninstall() {
  $options = array();
  foreach (module_list() as $module) {
    $module_options = module_invoke($module, 'admin_theme_info');
    if (count($module_options) > 0) {
      foreach ($module_options as $option => $info) {
        $info['option'] = $option;
        $info['module'] = $module;
        $options[] = $info;
      }
    }
  }
  return $options;
}

function admin_theme_variable_name_uninstall($module, $option) {
  return 'admin_theme_'. $module .'_'. $option;
}

/**
 * Implementation of hook_uninstall().
 */
function admin_theme_uninstall() {
  // cleaning up general admin theme variables
  variable_del('admin_theme_path');
  variable_del('admin_theme_path_disallow');
  
  // cleaning up module defined admin theme variables
  
  // we need to add admin theme's explicitly because it's not in the list of modules anymore
  $admin_theme_options = admin_theme_admin_theme_info_uninstall();
  $options = array();
  foreach ($admin_theme_options as $option => $info) {
    $info['option'] = $option;
    $info['module'] = 'admin_theme';
    $options[] = $info;
  }
  
  // mergin admin theme's options with other module options
  // @fixme does this work if other modules are also uninstalled at the same time?
  $list = array_merge(admin_theme_list_uninstall(), $options);
  
  // deleting the module defined variables
  foreach ($list as $info) {
    $var = admin_theme_variable_name_uninstall($info['module'], $info['option']);
    variable_del($var);
  }
}
