<?php
// $Id$

/**
 * @file
 * Creates a simplemenu.
 */

/**
 * Implementation of hook_menu().
 */
function simplemenu_menu() {
  $items = array();

  $items['admin/settings/simplemenu'] = array(
    'title' => 'SimpleMenu',
    'description' => 'Select the menu to display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplemenu_admin_settings'),
    'access arguments' => array('administer simplemenu'),
    'file' => 'simplemenu.admin.inc',
  );

  return $items;
}

/**
 * Is simplemenu enabled for this page request?
 */
function simplemenu_enabled() {
  static $enabled;

  if (!isset($enabled)) {
    global $theme;
    $exclusions = variable_get('simplemenu_exclusions', array());
    $enabled = (user_access('view simplemenu')
      && (!isset($exclusions[$theme]) || !$exclusions[$theme])
      && _simplemenu_page_visibility()
      && _simplemenu_superuser_active());
  }

  return $enabled;
}

/**
 * Implementation of hook_init().
 */
function simplemenu_init() {
  // do a simple access check here, since theme isn't available to check yet
  if (user_access('view simplemenu') && simplemenu_enabled()) {
    $path = drupal_get_path('module', 'simplemenu');
    drupal_add_css($path .'/simplemenu.css');

    $simplemenu_theme = variable_get('simplemenu_theme', 'original');
    $theme_file = $path .'/themes/'. $simplemenu_theme .'/'. $simplemenu_theme .'.css';
    if (is_file($theme_file)) {
      drupal_add_css($theme_file);
    }

    $settings = array(
      'effect' => variable_get('simplemenu_effect', 'opacity'),
      'effectSpeed' => variable_get('simplemenu_effect_speed', 'fast'),
      'element' => variable_get('simplemenu_element', 'body'),
      'hideDelay' => variable_get('simplemenu_hide_delay', 800),
      'placement' => variable_get('simplemenu_element_method', 'prepend'),
      'detectPopup' => variable_get('simplemenu_detect_popop', 1),
    );

    drupal_add_js(array('simplemenu' => $settings), 'setting');
    drupal_add_js($path .'/simplemenu.js');
    drupal_add_js($path .'/superfish.js');
  }
}

/**
 * Implementation of hook_footer().
 *
 * This has been broken off of simplemenu_init() because simplemenu_get_menu()
 * calls simplemenu_menu_tree() which calls menu_tree_output() which has several
 * calls to theme().  This initializes the theme system too early causing hard
 * to track bugs.
 *
 * @see http://drupal.org/node/219910
 */
function simplemenu_footer() {
  if (simplemenu_enabled()) {
    $simplemenu = drupal_to_js(simplemenu_get_menu());
    $path = base_path() . drupal_get_path('module', 'simplemenu');

    $output = "<script type=\"text/javascript\">var simplemenu = $simplemenu;</script>\n";

    return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function simplemenu_perm() {
  return array('view simplemenu', 'administer simplemenu');
}

/**
 * Render an HTML list of links for a given menu.
 */
function simplemenu_get_menu() {
  $output = '';

  // if a user turned off menu module but SimpleMenu was previously set
  // reset variable so a menu appears
  $menu_name = module_exists('menu') ? variable_get('simplemenu_menu', 'navigation:0') : 'navigation:0';
  $menu = simplemenu_menu_tree($menu_name);

  if (!$menu) {
    $menu = '<li><a href="'. url('admin/settings/simplemenu') .'">'. t('No menu items found. Try a different menu as the default.') .'</a></li>';
  }

  // This is ugly, I know, but it is the only way I can see to get the additional
  // links inside the <ul> tags
  if ($devel = simplemenu_get_devel()) {
    $pos = strpos($menu, '>') + 1;
    $menu = substr($menu, 0, $pos) . $devel . substr($menu, $pos);
  }

  $output .= $menu;

  return $output;
}

/**
 * Custom implementation of menu_tree().
 * We want to retrieve the entire menu structure for a given menu,
 * regardless of whether or not the menu item is expanded or not.
 */

function simplemenu_menu_tree($menu_name = 'navigation:0') {
  static $menu_output = array();

  if (!isset($menu_output[$menu_name])) {
    $tree = simplemenu_tree_all_data($menu_name);
    $menu_output[$menu_name] = menu_tree_output($tree);
  }
  return $menu_output[$menu_name];
}

/**
 * Modified menu_tree_all_data(), providing the complete menu tree below $root_menu
 * (which can be *any* menu item, not just the root of a custom menu).
 *
 * @param $root_menu
 *   root menu item of the tree to return as "menu_name:mlid" (mlid = menu link id)
 *
 * @todo we don't actually need $menu_name, $mlid would be sufficient
 */
function simplemenu_tree_all_data($root_menu = 'navigation:0') {
  static $tree = array();

  list($menu_name, $mlid) = explode(':', $root_menu);

  // Generate the cache ID.
  // "links:navigation:all:2" means "all from root to 2" (what the ...), so for "all from 2 down" we do "links:navigation:all:2:all"
  $cid = "links:$menu_name:all:$mlid". ($mlid ? ':all' : '');

  if (!isset($tree[$cid])) {
    // If the static variable doesn't have the data, check {cache_menu}.
    $cache = cache_get($cid, 'cache_menu');
    if ($cache && isset($cache->data)) {
      $data = $cache->data;
    }
    else {
      // Build and run the query, and build the tree.
      if ($mlid > 0) {
        $item = menu_link_load($mlid);
        // The tree is a subtree of $menu_name, so we need to restrict the query to
        // this subtree.
        $px = "p$item[depth]";
        $where = " AND ml.$px = %d AND ml.mlid != %d";
        $args = array($item[$px], $mlid);
      }
      else {
        // Get all links in this menu.
        $where = '';
        $args = array();
      }
      array_unshift($args, $menu_name);
      // Select the links from the table, and recursively build the tree.  We
      // LEFT JOIN since there is no match in {menu_router} for an external
      // link.
      $data['tree'] = menu_tree_data(db_query("
        SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*
        FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path
        WHERE ml.menu_name = '%s'". $where ."
        ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC", $args));
      $data['node_links'] = array();
      menu_tree_collect_node_links($data['tree'], $data['node_links']);
      // Cache the data.
      cache_set($cid, $data, 'cache_menu');
    }
    // Check access for the current user to each item in the tree.
    menu_tree_check_access($data['tree'], $data['node_links']);
    $tree[$cid] = $data['tree'];
  }

  return $tree[$cid];
}

/**
 * Return a list of devel module links if the module is enabled
 * and the user has access to this module.
 */
function simplemenu_get_devel() {
  $output = '';

  if (variable_get('simplemenu_devel', 0) && module_exists('devel')) {
    if (user_access('access devel information')) {
      $output = '<li class="expanded"><a href="'. url('admin/settings/devel') .'">'. t('Devel module') .'</a>';
      $output .= simplemenu_menu_tree('devel');
      $output .= '</li>';
    }
  }

  return $output;
}

/**
 * Determine if simplemenu should be displayed based on visibility settings.
 *
 * @return boolean
 */
function _simplemenu_page_visibility() {
  $operator = variable_get('simplemenu_visibility_operator', 0);
  $pages = variable_get('simplemenu_visibility_pages', '');

  if ($pages) {
    $path = drupal_get_path_alias($_GET['q']);
    // Compare with the internal and path alias (if any).
    $page_match = drupal_match_path($path, $pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
    }
    // When $operator has a value of 0, the menu is displayed on
    // all pages except those listed in $pages. When set to 1, it
    // is displayed only on those pages listed in $pages.
    $page_match = !($operator ^ $page_match);
  }
  else {
    $page_match = TRUE;
  }

  return $page_match;
}

/**
 * Check whether the superuser/admin should be shown simplemenu.
 */
function _simplemenu_superuser_active() {
  global $user;
  return $user->uid != 1 || variable_get('simplemenu_uid1', 1) == 1;
}

// vim: ts=2 sw=2 et syntax=php
