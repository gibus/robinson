// * date 2011/10/19 *

/**
* misc
*/

// ------ TRACE ------

function trace(s,o){
  if(window.console && window.console.debug){
    arguments.length === 2 ? window.console.debug(s,o) : window.console.debug(s);
  }else if(console && console.log){
    arguments.length === 2 ? console.log(s,o) : console.log(s);
  }
};

// ------ LOADJSCSSFILE ------

function loadjscssfile(filename, filetype){
 if (filetype=="js"){ //if filename is a external JavaScript file
  var fileref=document.createElement('script')
  fileref.setAttribute("type","text/javascript")
  fileref.setAttribute("src", filename)
 }
 else if (filetype=="css"){ //if filename is an external CSS file
  var fileref=document.createElement("link")
  fileref.setAttribute("rel", "stylesheet")
  fileref.setAttribute("type", "text/css")
  fileref.setAttribute("href", filename)
 }
 if (typeof fileref!="undefined")
  document.getElementsByTagName("head")[0].appendChild(fileref)
};

// ------ TIMEOUT

function Timeout(fn, interval) {
    var id = setTimeout(fn, interval);
    this.cleared = false;
    this.clear = function () {
        this.cleared = true;
        clearTimeout(id);
    };
}

// ------ HEXTORGB convert hex to rgb color ------

function HexToRGB(h){
	if(h.charAt(0)=="#"){
		var coul = h.substring(1,7);
		var r = parseInt(coul.substring(0,2),16);
		var g = parseInt(coul.substring(2,4),16);
		var b = parseInt(coul.substring(4,6),16);
		return 'rgb('+r+', '+g+', '+b+')';
	}else{
		return null;	
	}
}

// ------ PAIR check if number is pair of impair ------

function pair(n){return typeof n=='number'?(n%2==0?true:false):null;}

// ------ RANDOM ------

function random(n1,n2){
	return arguments.length === 1 && typeof n1 === 'number'? Math.random()*n1 : ( arguments.length === 2 && typeof n1 === typeof n2 && typeof n1 === 'number' ? n1 + Math.random()*(n2-n1) : NaN );
}
function randomInt(n1,n2){
	var rand = arguments.length === 1 && typeof n1 === 'number'? Math.random()*n1 : ( arguments.length === 2 && typeof n1 === typeof n2 && typeof n1 === 'number' ? n1 + Math.random()*(n2-n1) : NaN );
	return parseInt(rand);
}

// ------ ROUNDED ------

function round(n,granularity){
	if(arguments.length == 1){
		n = Math.round(n);
	}else{
		granularity = granularity.toString();
		granularity = granularity.replace(/./gi, 0);
		granularity = granularity.replace(/^./gi, 1);
		granularity = parseInt(granularity);
		n = Math.round(n*granularity)/granularity;
	}
	return n;
}

// ------ FLOOR ------

function floor(n,granularity){
	if(arguments.length == 1){
		n = Math.floor(n);
	}else{
		granularity = granularity.toString();
		granularity = granularity.replace(/./gi, 0);
		granularity = granularity.replace(/^./gi, 1);
		granularity = parseInt(granularity);
		n = Math.floor(n*granularity)/granularity;
	}
	return n;
}

// ------ CEIL ------

function ceil(n,granularity){
	if(arguments.length == 1){
		n = Math.ceil(n);
	}else{
		granularity = granularity.toString();
		granularity = granularity.replace(/./gi, 0);
		granularity = granularity.replace(/^./gi, 1);
		granularity = parseInt(granularity);
		n = Math.ceil(n*granularity)/granularity;
	}
	return n;
}

/**
* String
*/

// ------ TRIM remove multiple, leading or trailing spaces ------

String.prototype.trim = function() {
	return this.replace(/(^\s*)|(\s*$)/gi,"").replace(/[ ]{2,}/gi," ").replace(/\n /,"\n");
}

// ------ remove all accents, for sort() by example ------

var Latinise={};Latinise.latin_map={"Á":"A","Ă":"A","Ắ":"A","Ặ":"A","Ằ":"A","Ẳ":"A","Ẵ":"A","Ǎ":"A","Â":"A","Ấ":"A","Ậ":"A","Ầ":"A","Ẩ":"A","Ẫ":"A","Ä":"A","Ǟ":"A","Ȧ":"A","Ǡ":"A","Ạ":"A","Ȁ":"A","À":"A","Ả":"A","Ȃ":"A","Ā":"A","Ą":"A","Å":"A","Ǻ":"A","Ḁ":"A","Ⱥ":"A","Ã":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ḃ":"B","Ḅ":"B","Ɓ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ć":"C","Č":"C","Ç":"C","Ḉ":"C","Ĉ":"C","Ċ":"C","Ƈ":"C","Ȼ":"C","Ď":"D","Ḑ":"D","Ḓ":"D","Ḋ":"D","Ḍ":"D","Ɗ":"D","Ḏ":"D","ǲ":"D","ǅ":"D","Đ":"D","Ƌ":"D","Ǳ":"DZ","Ǆ":"DZ","É":"E","Ĕ":"E","Ě":"E","Ȩ":"E","Ḝ":"E","Ê":"E","Ế":"E","Ệ":"E","Ề":"E","Ể":"E","Ễ":"E","Ḙ":"E","Ë":"E","Ė":"E","Ẹ":"E","Ȅ":"E","È":"E","Ẻ":"E","Ȇ":"E","Ē":"E","Ḗ":"E","Ḕ":"E","Ę":"E","Ɇ":"E","Ẽ":"E","Ḛ":"E","Ꝫ":"ET","Ḟ":"F","Ƒ":"F","Ǵ":"G","Ğ":"G","Ǧ":"G","Ģ":"G","Ĝ":"G","Ġ":"G","Ɠ":"G","Ḡ":"G","Ǥ":"G","Ḫ":"H","Ȟ":"H","Ḩ":"H","Ĥ":"H","Ⱨ":"H","Ḧ":"H","Ḣ":"H","Ḥ":"H","Ħ":"H","Í":"I","Ĭ":"I","Ǐ":"I","Î":"I","Ï":"I","Ḯ":"I","İ":"I","Ị":"I","Ȉ":"I","Ì":"I","Ỉ":"I","Ȋ":"I","Ī":"I","Į":"I","Ɨ":"I","Ĩ":"I","Ḭ":"I","Ꝺ":"D","Ꝼ":"F","Ᵹ":"G","Ꞃ":"R","Ꞅ":"S","Ꞇ":"T","Ꝭ":"IS","Ĵ":"J","Ɉ":"J","Ḱ":"K","Ǩ":"K","Ķ":"K","Ⱪ":"K","Ꝃ":"K","Ḳ":"K","Ƙ":"K","Ḵ":"K","Ꝁ":"K","Ꝅ":"K","Ĺ":"L","Ƚ":"L","Ľ":"L","Ļ":"L","Ḽ":"L","Ḷ":"L","Ḹ":"L","Ⱡ":"L","Ꝉ":"L","Ḻ":"L","Ŀ":"L","Ɫ":"L","ǈ":"L","Ł":"L","Ǉ":"LJ","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ń":"N","Ň":"N","Ņ":"N","Ṋ":"N","Ṅ":"N","Ṇ":"N","Ǹ":"N","Ɲ":"N","Ṉ":"N","Ƞ":"N","ǋ":"N","Ñ":"N","Ǌ":"NJ","Ó":"O","Ŏ":"O","Ǒ":"O","Ô":"O","Ố":"O","Ộ":"O","Ồ":"O","Ổ":"O","Ỗ":"O","Ö":"O","Ȫ":"O","Ȯ":"O","Ȱ":"O","Ọ":"O","Ő":"O","Ȍ":"O","Ò":"O","Ỏ":"O","Ơ":"O","Ớ":"O","Ợ":"O","Ờ":"O","Ở":"O","Ỡ":"O","Ȏ":"O","Ꝋ":"O","Ꝍ":"O","Ō":"O","Ṓ":"O","Ṑ":"O","Ɵ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Õ":"O","Ṍ":"O","Ṏ":"O","Ȭ":"O","Ƣ":"OI","Ꝏ":"OO","Ɛ":"E","Ɔ":"O","Ȣ":"OU","Ṕ":"P","Ṗ":"P","Ꝓ":"P","Ƥ":"P","Ꝕ":"P","Ᵽ":"P","Ꝑ":"P","Ꝙ":"Q","Ꝗ":"Q","Ŕ":"R","Ř":"R","Ŗ":"R","Ṙ":"R","Ṛ":"R","Ṝ":"R","Ȑ":"R","Ȓ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꜿ":"C","Ǝ":"E","Ś":"S","Ṥ":"S","Š":"S","Ṧ":"S","Ş":"S","Ŝ":"S","Ș":"S","Ṡ":"S","Ṣ":"S","Ṩ":"S","Ť":"T","Ţ":"T","Ṱ":"T","Ț":"T","Ⱦ":"T","Ṫ":"T","Ṭ":"T","Ƭ":"T","Ṯ":"T","Ʈ":"T","Ŧ":"T","Ɐ":"A","Ꞁ":"L","Ɯ":"M","Ʌ":"V","Ꜩ":"TZ","Ú":"U","Ŭ":"U","Ǔ":"U","Û":"U","Ṷ":"U","Ü":"U","Ǘ":"U","Ǚ":"U","Ǜ":"U","Ǖ":"U","Ṳ":"U","Ụ":"U","Ű":"U","Ȕ":"U","Ù":"U","Ủ":"U","Ư":"U","Ứ":"U","Ự":"U","Ừ":"U","Ử":"U","Ữ":"U","Ȗ":"U","Ū":"U","Ṻ":"U","Ų":"U","Ů":"U","Ũ":"U","Ṹ":"U","Ṵ":"U","Ꝟ":"V","Ṿ":"V","Ʋ":"V","Ṽ":"V","Ꝡ":"VY","Ẃ":"W","Ŵ":"W","Ẅ":"W","Ẇ":"W","Ẉ":"W","Ẁ":"W","Ⱳ":"W","Ẍ":"X","Ẋ":"X","Ý":"Y","Ŷ":"Y","Ÿ":"Y","Ẏ":"Y","Ỵ":"Y","Ỳ":"Y","Ƴ":"Y","Ỷ":"Y","Ỿ":"Y","Ȳ":"Y","Ɏ":"Y","Ỹ":"Y","Ź":"Z","Ž":"Z","Ẑ":"Z","Ⱬ":"Z","Ż":"Z","Ẓ":"Z","Ȥ":"Z","Ẕ":"Z","Ƶ":"Z","Ĳ":"IJ","Œ":"OE","ᴀ":"A","ᴁ":"AE","ʙ":"B","ᴃ":"B","ᴄ":"C","ᴅ":"D","ᴇ":"E","ꜰ":"F","ɢ":"G","ʛ":"G","ʜ":"H","ɪ":"I","ʁ":"R","ᴊ":"J","ᴋ":"K","ʟ":"L","ᴌ":"L","ᴍ":"M","ɴ":"N","ᴏ":"O","ɶ":"OE","ᴐ":"O","ᴕ":"OU","ᴘ":"P","ʀ":"R","ᴎ":"N","ᴙ":"R","ꜱ":"S","ᴛ":"T","ⱻ":"E","ᴚ":"R","ᴜ":"U","ᴠ":"V","ᴡ":"W","ʏ":"Y","ᴢ":"Z","á":"a","ă":"a","ắ":"a","ặ":"a","ằ":"a","ẳ":"a","ẵ":"a","ǎ":"a","â":"a","ấ":"a","ậ":"a","ầ":"a","ẩ":"a","ẫ":"a","ä":"a","ǟ":"a","ȧ":"a","ǡ":"a","ạ":"a","ȁ":"a","à":"a","ả":"a","ȃ":"a","ā":"a","ą":"a","ᶏ":"a","ẚ":"a","å":"a","ǻ":"a","ḁ":"a","ⱥ":"a","ã":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ḃ":"b","ḅ":"b","ɓ":"b","ḇ":"b","ᵬ":"b","ᶀ":"b","ƀ":"b","ƃ":"b","ɵ":"o","ć":"c","č":"c","ç":"c","ḉ":"c","ĉ":"c","ɕ":"c","ċ":"c","ƈ":"c","ȼ":"c","ď":"d","ḑ":"d","ḓ":"d","ȡ":"d","ḋ":"d","ḍ":"d","ɗ":"d","ᶑ":"d","ḏ":"d","ᵭ":"d","ᶁ":"d","đ":"d","ɖ":"d","ƌ":"d","ı":"i","ȷ":"j","ɟ":"j","ʄ":"j","ǳ":"dz","ǆ":"dz","é":"e","ĕ":"e","ě":"e","ȩ":"e","ḝ":"e","ê":"e","ế":"e","ệ":"e","ề":"e","ể":"e","ễ":"e","ḙ":"e","ë":"e","ė":"e","ẹ":"e","ȅ":"e","è":"e","ẻ":"e","ȇ":"e","ē":"e","ḗ":"e","ḕ":"e","ⱸ":"e","ę":"e","ᶒ":"e","ɇ":"e","ẽ":"e","ḛ":"e","ꝫ":"et","ḟ":"f","ƒ":"f","ᵮ":"f","ᶂ":"f","ǵ":"g","ğ":"g","ǧ":"g","ģ":"g","ĝ":"g","ġ":"g","ɠ":"g","ḡ":"g","ᶃ":"g","ǥ":"g","ḫ":"h","ȟ":"h","ḩ":"h","ĥ":"h","ⱨ":"h","ḧ":"h","ḣ":"h","ḥ":"h","ɦ":"h","ẖ":"h","ħ":"h","ƕ":"hv","í":"i","ĭ":"i","ǐ":"i","î":"i","ï":"i","ḯ":"i","ị":"i","ȉ":"i","ì":"i","ỉ":"i","ȋ":"i","ī":"i","į":"i","ᶖ":"i","ɨ":"i","ĩ":"i","ḭ":"i","ꝺ":"d","ꝼ":"f","ᵹ":"g","ꞃ":"r","ꞅ":"s","ꞇ":"t","ꝭ":"is","ǰ":"j","ĵ":"j","ʝ":"j","ɉ":"j","ḱ":"k","ǩ":"k","ķ":"k","ⱪ":"k","ꝃ":"k","ḳ":"k","ƙ":"k","ḵ":"k","ᶄ":"k","ꝁ":"k","ꝅ":"k","ĺ":"l","ƚ":"l","ɬ":"l","ľ":"l","ļ":"l","ḽ":"l","ȴ":"l","ḷ":"l","ḹ":"l","ⱡ":"l","ꝉ":"l","ḻ":"l","ŀ":"l","ɫ":"l","ᶅ":"l","ɭ":"l","ł":"l","ǉ":"lj","ſ":"s","ẜ":"s","ẛ":"s","ẝ":"s","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ᵯ":"m","ᶆ":"m","ń":"n","ň":"n","ņ":"n","ṋ":"n","ȵ":"n","ṅ":"n","ṇ":"n","ǹ":"n","ɲ":"n","ṉ":"n","ƞ":"n","ᵰ":"n","ᶇ":"n","ɳ":"n","ñ":"n","ǌ":"nj","ó":"o","ŏ":"o","ǒ":"o","ô":"o","ố":"o","ộ":"o","ồ":"o","ổ":"o","ỗ":"o","ö":"o","ȫ":"o","ȯ":"o","ȱ":"o","ọ":"o","ő":"o","ȍ":"o","ò":"o","ỏ":"o","ơ":"o","ớ":"o","ợ":"o","ờ":"o","ở":"o","ỡ":"o","ȏ":"o","ꝋ":"o","ꝍ":"o","ⱺ":"o","ō":"o","ṓ":"o","ṑ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","õ":"o","ṍ":"o","ṏ":"o","ȭ":"o","ƣ":"oi","ꝏ":"oo","ɛ":"e","ᶓ":"e","ɔ":"o","ᶗ":"o","ȣ":"ou","ṕ":"p","ṗ":"p","ꝓ":"p","ƥ":"p","ᵱ":"p","ᶈ":"p","ꝕ":"p","ᵽ":"p","ꝑ":"p","ꝙ":"q","ʠ":"q","ɋ":"q","ꝗ":"q","ŕ":"r","ř":"r","ŗ":"r","ṙ":"r","ṛ":"r","ṝ":"r","ȑ":"r","ɾ":"r","ᵳ":"r","ȓ":"r","ṟ":"r","ɼ":"r","ᵲ":"r","ᶉ":"r","ɍ":"r","ɽ":"r","ↄ":"c","ꜿ":"c","ɘ":"e","ɿ":"r","ś":"s","ṥ":"s","š":"s","ṧ":"s","ş":"s","ŝ":"s","ș":"s","ṡ":"s","ṣ":"s","ṩ":"s","ʂ":"s","ᵴ":"s","ᶊ":"s","ȿ":"s","ɡ":"g","ᴑ":"o","ᴓ":"o","ᴝ":"u","ť":"t","ţ":"t","ṱ":"t","ț":"t","ȶ":"t","ẗ":"t","ⱦ":"t","ṫ":"t","ṭ":"t","ƭ":"t","ṯ":"t","ᵵ":"t","ƫ":"t","ʈ":"t","ŧ":"t","ᵺ":"th","ɐ":"a","ᴂ":"ae","ǝ":"e","ᵷ":"g","ɥ":"h","ʮ":"h","ʯ":"h","ᴉ":"i","ʞ":"k","ꞁ":"l","ɯ":"m","ɰ":"m","ᴔ":"oe","ɹ":"r","ɻ":"r","ɺ":"r","ⱹ":"r","ʇ":"t","ʌ":"v","ʍ":"w","ʎ":"y","ꜩ":"tz","ú":"u","ŭ":"u","ǔ":"u","û":"u","ṷ":"u","ü":"u","ǘ":"u","ǚ":"u","ǜ":"u","ǖ":"u","ṳ":"u","ụ":"u","ű":"u","ȕ":"u","ù":"u","ủ":"u","ư":"u","ứ":"u","ự":"u","ừ":"u","ử":"u","ữ":"u","ȗ":"u","ū":"u","ṻ":"u","ų":"u","ᶙ":"u","ů":"u","ũ":"u","ṹ":"u","ṵ":"u","ᵫ":"ue","ꝸ":"um","ⱴ":"v","ꝟ":"v","ṿ":"v","ʋ":"v","ᶌ":"v","ⱱ":"v","ṽ":"v","ꝡ":"vy","ẃ":"w","ŵ":"w","ẅ":"w","ẇ":"w","ẉ":"w","ẁ":"w","ⱳ":"w","ẘ":"w","ẍ":"x","ẋ":"x","ᶍ":"x","ý":"y","ŷ":"y","ÿ":"y","ẏ":"y","ỵ":"y","ỳ":"y","ƴ":"y","ỷ":"y","ỿ":"y","ȳ":"y","ẙ":"y","ɏ":"y","ỹ":"y","ź":"z","ž":"z","ẑ":"z","ʑ":"z","ⱬ":"z","ż":"z","ẓ":"z","ȥ":"z","ẕ":"z","ᵶ":"z","ᶎ":"z","ʐ":"z","ƶ":"z","ɀ":"z","ﬀ":"ff","ﬃ":"ffi","ﬄ":"ffl","ﬁ":"fi","ﬂ":"fl","ĳ":"ij","œ":"oe","ﬆ":"st","ₐ":"a","ₑ":"e","ᵢ":"i","ⱼ":"j","ₒ":"o","ᵣ":"r","ᵤ":"u","ᵥ":"v","ₓ":"x"};
String.prototype.latinise=function(){return this.replace(/[^A-Za-z0-9\[\] ]/g,function(a){return Latinise.latin_map[a]||a})};
String.prototype.latinize=String.prototype.latinise;
String.prototype.isLatin=function(){return this==this.latinise()}

/**
* Array
*/

// ------ UNIQUE reduces duplicates ------

array_unique = function(ar){
	var r = new Array();
	o:for(var i = 0, n = ar.length; i < n; i++)
	{
		for(var x = 0, y = r.length; x < y; x++)
		{
			if(r[x]==ar[i])
			{
				continue o;
			}
		}
		r[r.length] = ar[i];
	}
	return r;
};

// ------ SUBSTRACT substract two array ------

array_subtract = function(ara1,ara2) {
  var aRes = new Array() ;
  for (var i = ara1.length-1; i >= 0; i--)
    if(array_contains(ara2,ara1[i]))
      aRes.push(ara1[i]);
  return aRes ;
}

/*	
		SHUFFLE Add a shuffle function to Array object prototype
		author: Stephane Roucheray
		src: http://sroucheray.org/blog/2009/11/array-sort-should-not-be-used-to-shuffle-an-array/
		found 2011/09/08.
*/
array_shuffle = function(ar){
    var i = ar.length, j, temp;
    if ( i == 0 ) return;
    while ( --i ) {
        j = Math.floor( Math.random() * ( i + 1 ) );
        temp = ar[i];
        ar[i] = ar[j];
        ar[j] = temp;
    }
    return ar;
};

// ------ CONTAINS ------

array_contains = function(ar, obj) {
    var i = ar.length;
    while (i--)
        if (ar[i] === obj)
            return true;
    return false;
};

// ------ REMOVE ------

// /!\	Found on the Internet, not sure of efficiency.
// Array.prototype.remove = function(v) {
//     var x, _i, _len, _results;
//     _results = [];
//     for (_i = 0, _len = this.length; _i < _len; _i++) {
//         x = this[_i];
//         if (x !== v) {
//             _results.push(x);
//         }
//     }
//     return _results;
// };

array_remove = function(ar){
    var what, a= arguments, L= a.length, ax;
    while(L && ar.length){
        what= a[--L];
        while((ax= ar.indexOf(what))!= -1){
            ar.splice(ax, 1);
        }
    }
    return ar;
};

// for IE
// if(!Array.prototype.indexOf){
//     Array.prototype.indexOf= function(what, i){
//         i= i || 0;
//         var L= this.length;
//         while(i< L){
//             if(this[i]=== what) return i;
//             ++i;
//         }
//         return -1;
//     };
// }

array_indexOf = function(ar, what, i){
    i= i || 0;
    var L= ar.length;
    while(i< L){
        if(ar[i]=== what) return i;
        ++i;
    }
    return -1;
};

// ------ SUBSTRACT substract two array ------

function array_subtract(ara1,ara2) {
  var aRes = new Array() ;
  for (var i = ara1.length-1; i >= 0; i--)
    if( !array_contains(ara1[i],ara2) )
      aRes.push(ara1[i]);
  return aRes ;
};

/**
* Objects
*
*/

// ------ OBJECTSIZE get the length of objects ------

function objectSize(o) {
	var len = o.length ? --o.length : 0;
	for (var k in o)
		len++;
	return len;
}
// Object.prototype.size = function () {
// 	// var len = this.length ? --this.length : -1; // POURQUOI NE FONCTIONNE PAS?
// 	var len = this.length ? --this.length : -2;
// 	for (var k in this)
// 		len++;
// 	return len;
// }

function objectIsEmpty(obj){
	for (var prop in obj) {
		if (obj.hasOwnProperty(prop))
			return false;
	}
	return true;
};

// ------ OBJECTGETKEY get key of index ------

function objectGetKey(o,index){
	var i = 0;
	for (var k in o){
		if (k === 'length' || !o.hasOwnProperty(k)) 
			continue;
		if(i == index) 
			return k;
		i ++;
	}
}
// Object.prototype.getKey = function(index){
// 	var i = 0;
// 	for (var key in this){
// 		if (key === 'length' || !this.hasOwnProperty(key)) 
// 			continue;
// 		if(i == index) 
// 			return key;
// 		i ++;
// 	}
// }

// ------ OBJECTSORT sort object ------

function objectSort(o,value) {
    var connection = new Array();
	for (var i = objectSize(o) - 1; i >= 0; i--){
		var k = objectGetKey(o,i);
		for (var j = objectSize(o[k].wit) - 1; j >= 0; j--){
			var k2 = objectGetKey(o[k].wit,j);
			if (k2==value) {
				var the_wit = parseFloat(o[k].wit[k2]);
				connection.push( {wit:the_wit,nid:k} );
			};
		};
	};

	connection.sort(function(a,b){
		// return (a.wit - b.wit);//ascending
		return (b.wit - a.wit);//descending
	});

	var o_sort = {};
	for (var i = connection.length - 1; i >= 0; i--){
		// o_sort[connection[i].wit+'-'+connection[i].nid] = o[connection[i].nid];
		o_sort[connection[i].nid] = o[connection[i].nid];
	};

	return o_sort;
}

/**
* trigo
*/

// -------- getElementAngle ----------
// L'angle 0 correspond au nord (vers le haut)
// Exemple : getElementAngle(posElementX, posElementY, posSourisX, posSourisY)
//			 Ceci retournera l'angle de l'élément par rapport à la position de la souris

function getElementAngle(x1, y1, x2, y2) {
	var adj = x2 - x1;
	var opp = y2 - y1;
	
	var angle = Math.abs(Math.atan(opp/adj) * 180/Math.PI);
	
	if (adj > 0 && opp < 0 ) {
		angle = 90 - angle;
	}
	else if (adj >= 0 && opp >= 0) {
		angle += 90;
	}
	else if (adj < 0 && opp >= 0) {
		angle = 180 + (90 - angle);
	}
	else {
		angle += 270;
	}
	
	return angle;
}





// @koala-prepend "gui.js"
// @codekit-prepend "gui.js"


Drupal.behaviors.init_theme = function (context) {
  // Growl-style system messages
  $('#messages-and-help > div.messages:not(.processed)')
    .addClass('processed')
    .each(function() {
      // If a message meets these criteria, we don't autoclose
      // - contains a link
      // - is an error or warning
      // - contains a lenghthy amount of text
      if ($('a', this).size() || $(this).is('.error') || $(this).is('.warning') || $(this).text().length > 100) {
        $(this).prepend("<span class='close'>X</span>");
        $('span.close', this).click(function() {
          $(this).parent().slideUp('fast');
        });
      }
      else {
        // This essentially adds a 3 second pause before hiding the message.
        $(this).animate({opacity:1}, 5000, 'linear', function() {
          $(this).slideUp('fast');
        });
      }
    });
};

(function($) {

  var _debug = false;
  var _ajax_base_path;
  var _main_display_zone = {w:1024, h:768};
  var _cell_w = 340, _cell_h = 249, _line_h = _cell_h/4; 
  var _$stream_wrapper = $('<div>').attr('id','stream-wrapper').appendTo('#main');
  var _play_mode;

  var _themas = [];
  var _displayed_themas = [];
  var _thema_loaded = 0;
  var _anime_voisins_ready = 0;

  function init(){
    _ajax_base_path = Drupal.settings.basePath+Drupal.settings.pathPrefix;

    if($('body').is('.logged-in'))
      return;

    initSoundCloud();
    initKeyboardShortcuts();
    initGraphics();

    getContent();
  };

  function initGraphics(){
    setupGrid();

    $('h1', '#header')
      .clone().attr('id', 'site-name')
      .appendTo(_$stream_wrapper)
      .placeBlock({left:0})
      .notAnime();
  };

  function initSoundCloud(){
    SC.initialize({
      client_id: '705d246367c9a149b1450c8b069a504a'
    });
    // initiate auth popup
    // SC.connect(function() {
    //   SC.get('/me', function(me) { 
    //     console.log('Hello, ' + me.username); 
    //   });
    // });
  };

  function initKeyboardShortcuts(){

    // $(document)
    //   .bind('keydown', 'Alt+Shift+s:',shortcut_focusSearchField);
      // .bind('keydown', 'Alt+4',shortcut_viewmodeFull)
      // .bind('keydown', 'space',shortcut_togglePreview)
      // .bind('keydown', 'esc',shortcut_closeModaleContent)
      // .bind('keydown', 'up',shortcut_onUpArrow)
      // .bind('keydown', 'right',shortcut_onRightArrow)
      // .bind('keydown', 'down',shortcut_onDownArrow)
      // .bind('keydown', 'left',shortcut_onLeftArrow);
  };

  function getContent(){
    console.log('getcontent');
    var currentTime = new Date();
    $.getJSON(_ajax_base_path+'ajax/robinson/getcontent', 
      {currentTime:currentTime.getTime(), displayed_themas:_displayed_themas},
      contentLoaded  
    );
  };

  function contentLoaded(json){
    console.log("contentLoaded", json);

    _play_mode = json.mode;
    
    $('body').addClass(_play_mode+'-mode');

    switch(_play_mode){
      case 'random':
        playRandom(json);
        break;
      case 'programe':
        playPrograme(json);
    }
  };

  function playRandom(json){
    console.log('playRandom', json);
    newThema(json.thema);
  };

  function playPrograme(json){
    console.log("playPrograme", json);
    // décompte
    // intro
    // sequence thema
    // sequence voisin
    // ...
    // outro
    // getContent();
  };

  function programeNextSequence(){
    console.log('programe_next_sequence');
  };

  function newThema(t){
    console.log("newThema", t);
    // move sitename in front
    $('#site-name', _$stream_wrapper)
      .notAnime()
      .detach()
      .appendTo(_$stream_wrapper);

    // purge themas in dom
    // $themas = $('.thema', _$stream_wrapper);
    if(_themas.length > 5){
      // first mask the oldest
      _themas[0].$thema.notAnime();
      // then remove it from dom after 5sec
      
      setTimeout(function(){
        _themas[0].$thema.remove();
        // TODO : shift _thema array
        // delete _themas[0];
      }, 5000);
    }

    // create new thema
    var thema = new Thema(t.nid)
    _themas.push(thema);

    thema.$
      .on('ready', playThema)
      // .on('finished', newThema);
      .on('finished', onThemaFinished);
  };

  function onThemaFinished(event){
    console.log("onThemaFinished :: _play_mode = "+ _play_mode);
    switch(_play_mode){
      case "random":
        _displayed_themas.push(this.nid);
        // getContent();
        break;
      case "programe":
        // programeNextSequence();
        break;
    }
  };

  function playThema(event){
    $('#site-name').preAnime();
    // this.startAnime();
  };

  /**
  * Thema()
  */
  function Thema(nid){
    //console.log('- - - - - - - - - new Thema - - - - - - - -');
    
    // var thema = this;
    this.$ = $(this);
    this.nid = nid;
    this.ready_for_voisins = this.loading_voisin = false;
    this.availablespace = 10;
    this.played_voisins = [];
    this.played_voisinsnids = [];
    this.impulseFrequency = 5; // in seconds

    /* PROTOTYPES */
    if(typeof Thema.prototype.initialized == "undefined"){
      
      Thema.prototype.ajaxLoad = function(){
        var thema = this;
    
        $.getJSON(_ajax_base_path+'ajax/robinson/thema', 
          {'thema_nid':this.nid},
          function(json){
            thema.ajaxLoaded(json);
        });
      };

      Thema.prototype.ajaxLoaded = function(datas){
        //console.log('Thema :: loaded | datas', datas);

        this.thema_id = _thema_loaded = _thema_loaded+1;

        for(index in datas)
          this[index] = datas[index];

        this.initGraphics();
        this.listenVideo();
      };

      Thema.prototype.initGraphics = function(){
        //console.log('Thema :: initGraphics');
        $('<div>')
          .attr('id', 'thema-'+this.thema_id)
          .addClass('thema')
          .append(this.rendered_thema)
          .appendTo(_$stream_wrapper);

        this.$thema = $('#thema-'+this.thema_id, _$stream_wrapper);

        $('.thema-title', this.$thema).placeBlock({left:1}).notAnime();
        $('.content', this.$thema).placeBlock({left:0}).notAnime();

        // TODO this should go out of Thema
        $('#site-name', _$stream_wrapper).placeBlock({left:0});
      };
    
      Thema.prototype.listenVideo = function(){
        /*
        https://vimeo.com/forums/topic:37800
        http://jsfiddle.net/bdougherty/UTt2K/
        http://kevinchevallier.com/vimeo-froogaloop-ajax/
        http://juanfra.me/2012/08/flexslider-multiple-videos-v2/
        http://mikeheavers.com/main/code-item/a_simpler_vimeo_froogaloop_javascript_api_example
        https://developer.vimeo.com/player/js-api#universal-with-postmessage
        http://player.vimeo.com/playground
        http://jsfiddle.net/nerdess/D5fD4/3/
        */
        var thema = this;
        this.$viframe = $('iframe', this.$thema);
        this.$viframe.load(function(){
          $f(this).addEvent('ready', function(id){thema.onVideoReady(id);});
        });
      };
  
      Thema.prototype.onVideoReady = function(id) {
        //console.log('Thema :: onVideoReady : id = '+id);
        var thema = this;

        this.video_id = id;

        $f(id)
          .addEvent('play', function(id){thema.onVideoPlay(id);})
          .addEvent('playProgress', function(data, id){thema.onVideoPlayProgress(data, id);})
          .addEvent('pause', function(id){thema.onVideoPause(id);})
          .addEvent('finish', function(id){thema.onVideoFinished(id);});

        this.videoVolume = 1;
        $(document)
          .bind('keydown', 's', function(){thema.onVideoToggleSound();});
        // this.onVideoToggleSound();

        this.$.trigger('ready');

        this.startAnime();
        this.voisins = [];
        this.videoPlay();
      };  

      Thema.prototype.onVideoPlay = function(id){
        //console.log('Thema :: onVideoPlay : id = '+id);
      };

      Thema.prototype.onVideoPause = function(id){
        //console.log('Thema :: onVideoPause : id = '+id);
      };

      Thema.prototype.onVideoPlayProgress = function(data, id){
        // console.log('Thema :: onVideoPlayProgress | id = '+id+' | data = ',data);
        
        if(typeof this.video_duration == "undefined"){ // first trigger
          this.video_duration = data.duration;
          this.thema_duration = data.duration + 30;
        }else if(data.seconds > this.impulseFrequency){
          // impulse voisins stream every n second
          // convert sec to milisec and use modulo
          // since play progress is triggered every (environ) 300 millisec we test modulo < to 300
          // var milisec = parseInt(data.seconds*1000);
          // var modulo = milisec % (2*1000);
          // console.log("seconds = "+data.seconds) 
          // console.log("seconds = "+data.seconds+" | milisec = "+milisec+" | modulo = "+modulo);
          
          if( (data.seconds % this.impulseFrequency) < 0.25)
            this.impulseVoisins();

          // if(data.seconds >= 120){
          //   this.videoPause();
          //   this.onVideoFinished(id);
          // }  
        }
      };

      Thema.prototype.onVideoFinished = function(id){
        //console.log('Thema :: onVideoFinished | id = '+id);
        
        this.$viframe.parents('.content').postAnime();
      
        (function(id){
          setTimeout(function(){
            //console.log('Thema :: unload vimeo '+id);
            $f(id).api('unload');
          }, 4000);      
        }(id));

        this.$.trigger('finished');
      };

      Thema.prototype.onVideoToggleSound = function(){
        console.log('Thema :: onVideoToggleSound');
        if(this.videoVolume){
          $f(this.video_id).api('setVolume', 0);
          this.videoVolume = 0;
        }else{
          $f(this.video_id).api('setVolume', 1);
          this.videoVolume = 1;
        }
      };

      Thema.prototype.videoPlay = function(){
        $f(this.video_id).api('play');
      };

      Thema.prototype.videoPause = function(){
        $f(this.video_id).api('pause');
      };

      Thema.prototype.startAnime = function(){
        console.log("Thema :: startAnime");
        
        this.$thema.children().each(function(i){
          (function(e, i){
            setTimeout(function(){ 
              e.preAnime();
            }, 3000*i + Math.random()*4000);
          }($(this), i));
        });

        // when all elmnts are treated, we launch voisins
        (function(thema){
          setTimeout(function(){
            thema.$thema.children(':not(.content)').postAnime();
            thema.ready_for_voisins = true;
          }, 5000*thema.$thema.children().size());
        }(this));
      };

      Thema.prototype.impulseVoisins = function(){
        // console.log('impulseVoisins');
        if(this.ready_for_voisins && this.availablespace && !this.loading_voisin){
          this.loading_voisin = true;
          var thema = this;
          var voisin = new Voisin({thema:this});
          voisin.$
            .bind('loaded', function(event){thema.onVoisinLoaded(this, event)})
            .bind('aborted', function(event){thema.onVoisinAborted(this, event)})
            .bind('finished', function(event){thema.onVoisinFinished(this, event)});
        }
      };

      Thema.prototype.onVoisinLoaded = function(voisin, event){
        // console.log('Thema :: onVoisinLoaded : voisin', voisin);
        this.availablespace -= voisin.space;
        this.played_voisins.push(voisin);
        this.played_voisinsnids.push(voisin.nid);
        this.loading_voisin = false;
        if(voisin.media_type == "audio")
          this.is_playing_audio = true;
      };

      Thema.prototype.onVoisinAborted = function(voisin, event){
        console.log('Thema :: onVoisinAborted');
        this.loading_voisin = false;
      };

      Thema.prototype.onVoisinFinished = function(voisin, event){
        // console.log("Thema :: onVideoFinished : voisin", voisin);
        this.availablespace += voisin.space;
        if(voisin.media_type == "audio")
          this.is_playing_audio = false;

      };

      Thema.prototype.initialized = true;
    }

    this.ajaxLoad();
  }; // Thema

  /**
  * Voisin()
  */
  function Voisin(ops){
    //console.log('- - - - new Voisin '+nid+' - - - -');

    // var voisin = this;
    this.$ = $(this);
    
    for(op in ops)
      this[op] = ops[op];
    
    /* PROTOTYPES */
    if(typeof Voisin.prototype.initialized == "undefined"){

      Voisin.prototype.ajaxLoad = function(){
        console.log('Voisin :: ajaxload');// : this', this);
        var voisin = this;
        var params;
        if(this.nid){
          params = {voisin:{nid:this.nid}};
        }else if(this.thema){
          params = {thema:{
            nid                 :this.thema.nid, 
            voisins_list        :this.thema.voisins_list, 
            played_voisins_nids :this.thema.played_voisinsnids,
            availablespace      :this.thema.availablespace,
            is_playing_audio    :this.thema.is_playing_audio  
          }};
        }

        $.getJSON(_ajax_base_path+'ajax/robinson/voisin', 
          params,
          function(json){
            voisin.ajaxLoaded(json);
        });
      };

      Voisin.prototype.ajaxLoaded = function(datas){
        console.log('Voisin :: ajaxLoaded',datas);

        if(datas.voisin){
          for(index in datas.voisin)
            this[index] = datas.voisin[index];
  
          // this.parseComportement();

          this.$.trigger('loaded');

          this.start();
        }else{
          this.$.trigger('aborted');
        }
        
        
      };

      // not used any more
      // i made the comportement parsing on server side
      // it's cached by session
      // it allows me to precalculate the space and so on to filter the voisin to randomly choose with available space 
      // Voisin.prototype.parseComportement = function(){
        // console.log("Voisin :: parseComportement ", this.comportement);
        // field_discursif              "0"
        // field_duree_sec_minmax       "5/120"
        // field_pause_apres_le_voisin  "0/0"
        // field_proba                  "50"
        // field_taille_minmax          "1/3"

        // this.discursif = parseInt(this.comportement.field_discursif) == 1;
        // this.proba = parseInt(this.comportement.field_proba);

        // var d = this.comportement.field_duree_sec_minmax.match(/(\d{1,3})\/(\d{1,3})/i);
        // // console.log("d", d);
        // this.duree = {
        //   min:d[1],
        //   max:d[2]
        // }

        // d = this.comportement.field_pause_apres_le_voisin.match(/(\d{1,3})\/(\d{1,3})/i);
        // // console.log("d", d);
        // this.pauseafter = {
        //   min:d[1],
        //   max:d[2]
        // }

        // d = this.comportement.field_taille_minmax.match(/(\d{1})\/(\d{1})/i);
        // // console.log("d", d);
        // this.taille = {
        //   min:d[1],
        //   max:d[2]
        // }
        
        // console.log("voisin :: ", this);
      // };

      Voisin.prototype.start = function(){
        // console.log('Voisin :: start : media_type = '+this.media_type);

        if(typeof this['start'+this.media_type] == 'function')
          this['start'+this.media_type].call(this);
      };

      /**
      * common init
      * html
      */
      Voisin.prototype.initCommons = function(){
        //console.log('Voisin :: initGraphics '+this.nid, this);

        this.$voisin = $(this.rendered)   
          .appendTo(this.thema.$thema)
          .notAnime();
      };

      Voisin.prototype.setSize = function(){
        // this.$voisin.width(_cell_w * parseInt(this.taille.min + Math.random()*(this.taille.max-this.taille.min)));
        this.$voisin.width(_cell_w * this.comportement.taille);
      };

      Voisin.prototype.setDuree = function(){
        console.log('Voisin :: setDuree');
        (function(voisin){
          setTimeout(function(){
            voisin.endAnime();
          }, voisin.comportement.duree*1000);
        }(this));
      };

      Voisin.prototype.endAnime = function(){
        console.log('Voisin :: endAnime');
        this.$voisin.postAnime();
        this.$.trigger('finished');
      };

      /**
      * text
      */
      Voisin.prototype.starttext = function(){
        console.log("Voisin :: start : text", this);
        this.initCommons();
        this.setSize();
        this.$voisin.placeBlock();
        this.$voisin.preAnime();
        this.setDuree();
      };

      /**
      * image
      */
      Voisin.prototype.startimage = function(){
        console.log("Voisin :: start : image", this);
        this.initCommons();
        this.$voisin.placeBlock();
        this.$voisin.preAnime();
        this.setDuree();
      };

      /**
      * audio
      */
      Voisin.prototype.startaudio = function(){
        console.log("Voisin :: start : audio", this);
        this.initCommons();
        this.setupSoundCloudPlayer();
        this.$voisin.css('top', -1000);
      };

      Voisin.prototype.setupSoundCloudPlayer = function(){
        // http://developers.soundcloud.com/docs#resolving
        // http://developers.soundcloud.com/docs/api/sdks#javascript
        // console.log('Voisin :: setupSoundCloudPlayer');
        var voisin = this;

        var $a = $('a[href^="https://soundcloud.com"]:first');
        var url = $a.attr('href');//.replace('https://', ''); 
        // var url = "https://soundcloud.com/fanfare-bleme/feuilles-et-tv/s-FaDA4";
        // console.log('Voisin :: SC : track url',url);
        SC.get('/resolve', { url: url }, function(track) {
          // console.log("Voisin :: SC resolved : track", track);          
          
          if(typeof track.id == "undefined")
            return;

          SC.stream(track.stream_url, {
            autoPlay:true,
            autoLoad:true,
            onplay:function(){voisin.onSoundPlay();},
            onfinish:function(){voisin.onSoundFinish();},
          },function(sound){
            voisin.sound = sound;
          });
        });
      };

      Voisin.prototype.onSoundPlay = function(){
        // console.log('Voisin :: onSoundPlay : sound',this.sound);
      };

      Voisin.prototype.onSoundFinish = function(){
        console.log('Voisin :: onSoundFinish');
        this.endAnime();
      };

      /**
      * video
      */
      Voisin.prototype.startvideo = function(){
        console.log("Voisin :: start : video", this);

        this.initCommons();
        this.$voisin.placeBlock();
        

        var voisin = this;
        this.$viframe = $('iframe', this.$voisin);
        this.$viframe.load(function(){
          $f(this).addEvent('ready', function(id){voisin.onVideoReady(id);});
        });        
      };

      Voisin.prototype.onVideoReady = function(id) {
        //console.log('Voisins :: onVideoReady : id = '+id);         
        var voisin = this;
        this.video_id = id;

        $f(id)
          .addEvent('play', function(id){voisin.onVideoPlay(id);})
          .addEvent('playProgress', function(data, id){voisin.onVideoPlayProgress(data, id);})
          .addEvent('pause', function(id){voisin.onVideoPause(id);})
          .addEvent('finish', function(id){voisin.onVideoFinished(id);});

        this.startAnimeVideo();
      };

      Voisin.prototype.startAnimeVideo = function(){
        this.playVideo();
        this.$voisin.preAnime();
        // (function(voisin){
        //   voisin.$.on('video_finished', function(){
        //     voisin.unloadVideo();
        //     voisin.$voisin.postAnime();
        //   });  
        // }(this));
      };

      Voisin.prototype.playVideo = function(){
        $f(this.video_id).api('play');
      };

      Voisin.prototype.unloadVideo = function(){
        // var $viframe = $('iframe', $voisin);
        // var id = $viframe.attr('id');

        // (function(id){
          // setTimeout(function(){$f(id).api('play');}, 500);
        // }(id));

        $f(this.video_id).api('unload');
      };

      Voisin.prototype.onVideoPlay = function(id){
        //console.log('Voisin :: onVideoPlay : id = '+id);
      };

      Voisin.prototype.onVideoPause = function(id){
        //console.log('Voisin :: onVideoPause : id = '+id);
      };

      Voisin.prototype.onVideoPlayProgress = function(data, id){
        //console.log('Voisin :: onVideoPlayProgress | id = '+id+' | data = ',data);
        // if(data.seconds >= 15){
        //   $f(id).api('pause');
        //   onThemaVideoFinish(id);
        // }
      };

      Voisin.prototype.onVideoFinished = function(id){
        //console.log('Voisin :: onVideoFinished | id = '+id);
        // onVideoFinish(id);
        // this.$.trigger('video_finished');
        this.unloadVideo();
        this.endAnime();
      };

      Voisin.prototype.initialized = true;
    }

    this.ajaxLoad();
  }; // Voisins


  /* GRID */
  function setupGrid(){
    //console.log('setupGrid');
    _main_display_zone.top = ($(window).height() - _main_display_zone.h)/2;
    _main_display_zone.left = ($(window).width() - _main_display_zone.w)/2;

    if(_debug) drawDebugGrid();
  };

  function drawDebugGrid(){
    var $g = $('<div>').attr('id','debug-grid').appendTo('body');

    $g.css({
      "top":_main_display_zone.top,
      "left":_main_display_zone.left,
      "width":_main_display_zone.w-2,
      "height":_main_display_zone.h-2
    });

    $('<div>').addClass('cells').css({
      "top":-1,
      "left":_cell_w-1,
      "width":_cell_w-2,
      "height":_main_display_zone.h-2
    }).appendTo($g);

    $('<div>').addClass('cells').css({
      "top":_cell_h-1,
      "left":-1,
      "width":_main_display_zone.w-2,
      "height":_cell_h-2
    }).appendTo($g);

    for (var i = 0; i < 6; i++) {
      $('<div>').addClass('lines').css({
        "top":_line_h+(_line_h*2)*i -1,
        "left":-1,
        "width":_main_display_zone.w-2,
        "height":_line_h-2
      }).appendTo($g);      
    };
  };

  function placeBlock($elmt, opts){
    //console.log('placeBlock', $elmt);
    var defaults = {top:"rand",left:"rand"};   
    var options = $.extend({}, defaults, opts);
    
    //console.log('options', options);  
    var top_free_cells = Math.floor((_main_display_zone.h - $elmt.innerHeight() +_line_h)/_line_h);
    var top_cell = options.top == 'rand' ? Math.floor(Math.random()*(top_free_cells)) : options.top;
    var top = _main_display_zone.top + top_cell*_line_h;

    var left_free_cells = Math.floor((_main_display_zone.w - $elmt.width() + _cell_w)/_cell_w);
    var left_cell = options.left == 'rand' ? Math.floor(Math.random()*(left_free_cells)) : options.left;
    var left = _main_display_zone.left + left_cell*_cell_w;

    $elmt
      .css({
        "top":top+'px',
        "left":left+'px',
      })
      .addClass('placed');
  };

  /* ANIME */
  function notAnime($elmt){
    $elmt
      .addClass("not-anime")
      .removeClass("pre-anime")
      .removeClass('anime')
      .removeClass('post-anime');
  };

  // preAnime() is automaticly folllowed by anime()
  function preAnime($elmt){
    $elmt
      .removeClass("not-anime")
      .addClass("pre-anime")
      .removeClass('anime')
      .removeClass('post-anime');
    
   (function($elmt){
      setTimeout(function(){
        $elmt.anime();
      }, 1000 + Math.random()*1000);
    }($elmt));
  };

  function anime($elmt){
    $elmt
      .removeClass("not-anime")
      .removeClass('pre-anime')
      .addClass("anime")
      .removeClass('post-anime');
  };

  function postAnime($elmt){
    $elmt
      .removeClass("not-anime")
      .removeClass('pre-anime')
      .removeClass('anime')
      .addClass("post-anime");
  };

  /**
  * ready
  */
  $(document).ready(init);


  /**
  * plugins
  */
  $.fn.randomize = function(selector){
    (selector ? this.find(selector) : this).parent().each(function(){
        $(this).children(selector).sort(function(){
            return Math.random() - 0.5;
        }).detach().appendTo(this);
    });

    return this;
  };
  
  $.fn.center = function () {
    this.css("position","absolute");
    this.css("top", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) + 
                                                $(window).scrollTop()) + "px");
    this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) + 
                                                $(window).scrollLeft()) + "px");
    return this;
  };

  $.fn.placeBlock = function(o) {
    placeBlock(this, o);
    return this;
  };

  $.fn.notAnime = function(){
    notAnime(this);
    return this;
  };

  $.fn.preAnime = function(){
    preAnime(this);
    return this;
  };

  $.fn.anime = function(){
    anime(this);
    return this;
  };

  $.fn.postAnime = function(){
    postAnime(this);
    return this;
  };


})(jQuery);
